#!/bin/bash
set -eo pipefail

VERSION="0.0.1"
TMP=/tmp
ORIGIN=origin
BRIDGE_IP=172.17.42.1

usage() {
  cat <<-EOF

  Usage: doploy [command]

  Commands:

    key                  get deploy key
    deploy               push app
    urls                 list urls handled by router
    running              list running docker containers
    redis                connect to redis cli
    install              install required dependencies

EOF

}

usage_deploy() {
  cat <<-EOF

  Usage: doploy deploy [options]

  Deploy options:

    Required:
    -n <name>            name of app [some-cool-app]
    -r <repo>            repo [git@github.com:firstandthird/app]
    -h <url>             host url [app.com]

    Optional:
    -b <branch>          branch [default: master]
    -e <env>             env vars [NODE_ENV=production]
    -p <port>            port [default: 5000]
    -l <link:link>       link to other container [mongo:mongo]

EOF
}

check_sudo() {
  if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo "Must run as root"
    exit
  fi
}

get_key() {
  if [[ ! -f ~/.ssh/id_rsa.pub ]]; then
    ssh-keygen -q -f ~/.ssh/id_rsa -P ""
  fi

  cat ~/.ssh/id_rsa.pub
}

redis() {
  cmd="exec redis-cli -h \"\$REDIS_PORT_6379_TCP_ADDR\" -p \"\$REDIS_PORT_6379_TCP_PORT\" $@"
  sudo docker run --link hipache:redis --rm hipache sh -c "$cmd"
}

redis_cli() {
  cmd="exec redis-cli -h \"\$REDIS_PORT_6379_TCP_ADDR\" -p \"\$REDIS_PORT_6379_TCP_PORT\" $@"
  sudo docker run -it --link hipache:redis --rm hipache sh -c "$cmd"
}

deploy() {
  NAME=${DOPLOY_NAME:-}
  REPO=${DOPLOY_REPO:-}
  HOST=${DOPLOY_HOST:-}
  BRANCH=${DOPLOY_BRANCH:-master}
  ENVVAR=${DOPLOY_ENV:-}
  PORT=${DOPLOY_PORT:-5000}
  LINK=${DOPLOY_LINK:-}
  while getopts ":n:r:h:b:e:p:l:" OPTION "$@"; do
    case $OPTION in
      n) NAME=$OPTARG;;
      r) REPO=$OPTARG;;
      h) HOST=$OPTARG;;
      b) BRANCH=$OPTARG;;
      e) ENVVAR=$OPTARG;;
      p) PORT=$OPTARG;;
      l) LINK=$OPTARG;;
    esac
  done
  # check for required args
  if [[ -z $NAME ]] || [[ -z $REPO ]] || [[ -z $HOST ]]; then
    usage_deploy
    exit 1
  fi

  cd $TMP
  if [[ ! -d $NAME ]]; then
    echo "Cloning $REPO"
    git clone $REPO $NAME
  fi
  cd $NAME
  git checkout $BRANCH
  echo "Fetching latest code on $BRANCH"
  git pull $ORIGIN $BRANCH

  commit=$(git log --pretty=format:'%h' -n 1)

  CONTAINER_NAME="doploy/$NAME"

  echo "Getting running containers"
  running=$(sudo docker ps | grep $NAME: | awk '{ print $1 }')

  image_id=$(sudo docker images | grep ^$CONTAINER_NAME\\s*$commit | awk '{ print $3 }')

  if [[ -z "$image_id" ]]; then
    echo "Building docker image"
    sudo docker build -t $CONTAINER_NAME:$commit .
  else
    echo "Skipping build because same as last build"
  fi

  echo "Running new container"
  [[ -n $LINK ]] && link_arg="--link $LINK"
  [[ -n $ENVVAR ]] && env_arg="-e $ENVVAR"

  id=$(sudo docker run -d -p $PORT -e PORT=$PORT $link_arg $env_arg $CONTAINER_NAME:$commit)
  port=$(sudo docker port $id $PORT | sed 's/0.0.0.0://')

  redis_key="frontend:$HOST"
  count=$(redis "llen $redis_key")

  if [[ "$count" == "0" ]]; then
    echo "Adding app to hipache"
    redis "rpush $redis_key $NAME"
  fi

  echo "Adding new container to router"
  redis "rpush $redis_key http://$BRIDGE_IP:$port"

  sleep 2

  for i in ${running[@]}; do
    port=$(sudo docker port $i $PORT | sed 's/0.0.0.0://')
    url="http://$BRIDGE_IP:$port"
    echo "Removing $url from router"
    redis "lrem $redis_key 0 $url"
  done

  echo "Waiting for connections to close"
  sleep 2

  for i in ${running[@]}; do
    echo "Killing docker container"
    sudo docker stop $i
    sleep 1
    sudo docker rm $i
  done
}

install() {
  check_sudo
  curl -sSL https://get.docker.io/ubuntu/ | sh
  docker pull hipache
  docker run -d -p 80:80 --name hipache hipache
}

version() {
  echo $VERSION
}

update() {
  log "updating doploy(1)"
  rm -fr /tmp/doploy
  git clone git://github.com/firstandthird/doploy.git \
    --depth 0 \
    /tmp/doploy \
    &> /tmp/doploy \
  && cd /tmp/doploy \
  && make install \
  && log "updated $VERSION -> `./bin/doploy --version`"
}

CMD=$1
shift
case $CMD in
  key)
    get_key
    exit
    ;;
  deploy)
    deploy $@
    exit
    ;;
  redis)
    redis_cli
    exit
    ;;
  urls)
    hosts=$(redis keys frontend*)
    for host in ${hosts[@]}; do
      echo $host
      redis lrange $host 0 -1
      echo
    done
    exit
    ;;
  running)
    sudo docker ps
    exit
    ;;
  update)
    update
    exit
    ;;
  install)
    install
    exit
    ;;
  --version)
    version
    exit
    ;;
  *)
    usage
    exit
    ;;
esac
